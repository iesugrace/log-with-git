#!/usr/bin/env python3
# Author: Joshua Chen
# Date: 2016-01-03
# Location: Shenzhen
# Description: a log tool with encrypted remote backup.

import sys, os
import re
import time

prog_path = os.path.realpath(__file__)
prog_dir  = os.path.dirname(prog_path)
lib_dir   = os.path.join(prog_dir, 'lib')
sys.path.insert(0, lib_dir)

from config import Config
from log import Log
from timeutils import isodatetime
import applib

# A global dictionary to hold all configs,
# some classes reference this variable
appConfigs = {}


def add(args):
    """ Add a log
    Subject is required, data is not. If message provided,
    all lines before an empty line will serve as the subject,
    and the rest as the data. If the subject or the data is
    not available from the argument, then read from the
    stdin if the stdin is not a tty. If the data from stdin
    can not be correctly decoded (binary) to provide the
    missing subject, enter interactive mode and open up an
    editor to collect information.

    Priority of the source of subject and data, descending:

        cmdline arguments --> stdin --> editor

    """
    if '--help' in args:
        help('add')
        exit(0)

    tag = _time = scene = people = message = subject = ''
    data = b''
    binary = False
    while len(args) >= 2:
        key = args.pop(0)
        if key == '-g':
            tag = args.pop(0)
        elif key == '-t':
            _time = args.pop(0)
        elif key == '-c':
            scene = args.pop(0)
        elif key == '-p':
            people = args.pop(0)
        elif key == '-m':
            message  = args.pop(0)
    # subject and data from command line
    if message:
        msgLines = message.rstrip('\n').split('\n\n')
        subject  = msgLines.pop(0)
        data     = '\n\n'.join(msgLines).encode()

    interactive = not subject
    if interactive and not os.isatty(sys.stdin.fileno()):
        raise applib.NotTerminalException("stdin is not a terminal")

    # data from stdin
    if not data and not os.isatty(sys.stdin.fileno()):
        stdin = os.fdopen(sys.stdin.fileno(), 'rb')
        iData = stdin.read()
        if applib.isBinary(iData):
            binary = True
            data   = applib.binToAsc(iData)
        else:
            binary = False
            data   = iData
    if not binary:
        data = data.decode()
    if not _time:
        _time = isodatetime()
    logger = Log(appConfigs)
    logger.add(subject=subject, time=_time, scene=scene, people=people,
               tag=tag, data=data, binary=binary, interactive=interactive)


def _list(args):
    """ List log summary

    Can match log entries by time, or by regular expression.

    Time format (implemented in compreDay):
        today: the day when the command runs
        negative number: N-th day ago (-1, -70)
        one or two digit number: a day of a month (1, 12)
        four digit number: a day of the specific month  (0413, 0314)
        four digit number: a year  (2015, 2016)
        six digit number: a month of a year  (201512, 201601)
        eight digit number: a day of a month of a year  (20160101)

    Time contextual meaning (implemented in parseTime):
        a. pure number/word: from the first second of it,
                             to the last second of it
        b. colon separated : from the first second of the first,
                             to the last second of the second,
                             'today' next to the colon can be omitted.
        c. comma separated: combination of 'a' or 'b' types
    """
    if '--help' in args:
        help('list')
        exit(0)

    remainOpts = []
    if len(args) == 0:  # list all records
        filterFunc = lambda record: True
    else:
        filterFunc, remainOpts = procArgs(args)
    limit   = extractLimitArgs(remainOpts)
    logger  = Log(appConfigs)
    records = logger.collectLogs(filterFunc)
    records = sorted(records, key=lambda x: x.time, reverse=True)
    if limit:
        records = records[:limit]
    pageOut(records)


def extractLimitArgs(args):
    """ Get all limit arguments out of the args, return the last one.
    """
    argsCopy = args[:]
    limit    = None
    for arg in argsCopy:
        if re.search('^-[1-9][0-9]*$', arg):
            limit = arg
            args.remove(arg)
    if limit:
        limit = int(limit[1:])
    return limit


def pageOut(records):
    """ Apply color to the text, pipe the
    text to a pager, for a better viewing.
    """
    def colorize(record):
        """ Render the first line
        """
        text = str(record)
        if os.isatty(sys.stdout.fileno()):
            pos     = text.find('\n')
            id      = text[:pos]
            cFormat = '\033[0;33m%s\033[0m'
            id      = cFormat % id
            text    = id + text[pos:]
        return text

    if not records:
        return
    lastOne = records.pop()
    pager   = applib.Pager(['-XRF'])
    for record in records:
        pager.write(colorize(record), '\n\n', isBytes=False)
    pager.write(colorize(lastOne), '\n', isBytes=False)
    pager.go()


def procArgs(args):
    """ Process the arguments, return a filter function.
    """
    regexps    = []
    matchAll   = False
    timePoints = []
    remainOpts = []
    while args:
        arg = args.pop(0)
        if arg[:2] == '-S':     # regular expression
            if len(arg) > 2:
                regexps.append(arg[2:])
            else:
                assert len(args) > 0, "need argument for -S option"
                regexps.append(args.pop(0))
        elif arg == '--all-match':  # affects the RE evaluation
            matchAll = True
        elif arg[:2] == '-t':   # time
            if len(arg) > 2:
                timeArg = arg[2:]
            else:
                assert len(args) > 0, "need argument for -t option"
                timeArg = args.pop(0)
            assert validateTime(timeArg), ("invalid time: %s" % timeArg)
            timePoints.extend(parseTime(timeArg))
        elif re.search('^-[1-9][0-9]*$', arg):
            remainOpts.append(arg)
        else:
            assert False, "unrecognized option: %s" % arg
    return makeFilter(timePoints, regexps, matchAll), remainOpts


def validateTime(timeStr):
    """ Check the time string format
    Only check the textual format, not the meaning
    of the time string, therefore 20160230 is valid.
    """
    if timeStr == 'today':
        return True

    lev1_parts = timeStr.split(',')
    for lev1_part in lev1_parts:
        lev2_parts = lev1_part.split(':')
        for x in lev2_parts:
            # empty means 'today'
            regexp = '^(today|-[0-9]+|[0-9]{1,2}|[0-9]{4}|[0-9]{6}|[0-9]{8})?$'
            if re.search(regexp, x) is None:
                return False
    return True


def parseTime(timeStr):
    """ Parse the time string, return a list of lists,
    every inner list represents a period of time between
    two points, the relationship between all inner lists
    is OR, not AND.
    """
    if timeStr == 'today':
        return [todayPeriod()]

    allPairs   = []
    lev1_parts = timeStr.split(',')
    for lev1_part in lev1_parts:
        lev2_parts = lev1_part.split(':')
        if len(lev2_parts) == 2: # start time and end time
            firstSecond, junk = compreTime(lev2_parts[0])
            junk, lastSecond  = compreTime(lev2_parts[1])
            allPairs.append([firstSecond, lastSecond])
        else:   # one time
            pair = compreTime(lev2_parts[0])
            allPairs.append(pair)
    return allPairs


def todayPeriod():
    """ Return the first and the last seconds of today
    """
    return dayPeriod()


def dayPeriod(ts=None):
    """ Return the first and the last seconds
    of a day, 'ts' is a time.struct_time object,
    if omitted, assume the current time.
    """
    if ts is None:
        ts = time.localtime()
    ts1 = time.strptime('%d%02d%02d' % ts[:3], '%Y%m%d')
    firstSecond = int(time.mktime(ts1))
    timeStr = '%d%02d%02d%02d%02d%02d' % (ts[:3] + (23, 59, 59))
    ts2 = time.strptime(timeStr, '%Y%m%d%H%M%S')
    lastSecond  = int(time.mktime(ts2))
    return [firstSecond, lastSecond]


def compreTime(text):
    """ Distinguish between year and other
    time format, call compreYear and compreDay
    accordingly. Empty string means 'today'.
    """
    if not text:
        return todayPeriod()
    if len(text) == 4 and text[:2] == '20':
        return compreYear(text)
    else:
        return compreDay(text)


def compreYear(text):
    """ Take the given number string as a year, return
    the first second and the last second of the year.
    """
    firstDay = time.strptime(text, '%Y')
    lastDay  = time.strptime('%s%s%s' % (text, '12', '31'), '%Y%m%d')
    firstSecond, junk = dayPeriod(firstDay)
    junk, lastSecond  = dayPeriod(lastDay)
    return [firstSecond, lastSecond]


def compreDay(text):
    """ Parse the given number string, return the
    first second and the last second of the day.
    """
    l = len(text)

    try:
        if text[0] == '-':          # negative day
            days = int(text)
            second = time.time() + 86400 * days
            res = time.localtime(second)
        elif 1 <= l <= 2:           # a day of the current month
            y, m = time.localtime()[:2]
            d = int(text)
            res = time.strptime('%s%02d%02d' % (y, m, d), '%Y%m%d')
        elif l == 4:                # day of a specific month
            y = time.localtime()[0]
            res = time.strptime('%s%s' % (y, text), '%Y%m%d')
        elif l == 6:                # month of a specific year
            res = time.strptime(text, '%Y%m')
        elif l == 8:                # a day of a month of a year
            res = time.strptime(text, '%Y%m%d')
    except:
        raise applib.InvalidTimeException("invalid time: %s" % text)
    return dayPeriod(res)


def makeFilter(timePoints, regexps, matchAll=False):
    """ Create a filter function for filtering
    the record with the given regular expression,
    and the time points. The filter function
    expects a Record instance object.
    """
    def logFilter(record, regexps=regexps,
                timePoints=timePoints, matchAll=matchAll):
        """ timeMatch is True if the time of the record is
        within any pair of the timePoints, regMatch is True
        if any of these fields of a record match the given
        regular expression: subject, scene, people, tag,
        and data if it's not of binary form. Return True
        only when both timeMatch and regMatch are True.
        """
        timeMatch = regMatch = True
        if timePoints:
            t = record.time
            x = [True for t1, t2 in timePoints if t1 <= t <= t2]
            timeMatch = bool(x)
        if regexps:
            g = [record.subject, record.scene, record.people, record.tag]
            if not record.binary:
                g.append(record.data)

            if matchAll:
                matcher = lambda ps, f: len([1 for p in ps if re.search(p, f)]) == len(ps)
            else:
                matcher = lambda ps, f: bool([1 for p in ps if re.search(p, f)])
            x = [True for f in g if matcher(regexps, f)]
            regMatch = bool(x)
        return timeMatch and regMatch

    return logFilter


def delete(args):
    """ Delete logs

    Identify logs by the ID, multiple IDs are accepted,
    either from the command line, or from a file; the
    file shall have one line for one ID.
    """
    if '--help' in args:
        help('del')
        exit(0)

    ids   = []
    ifile = None
    force = False
    while args:
        arg = args.pop(0)
        if arg[:2] == '-i':     # input file
            if len(arg) > 2:
                ifile = arg[2:]
            else:
                assert len(args) > 0, "need argument for -i option"
                ifile = args.pop(0)
        elif arg == '-f':
            force = True
        else:   # log ID
            ids.append(arg)
    if ifile:
        lines = open(ifile).readlines()
        lines = [x.rstrip() for x in lines if len(x) > 1]
        ids.extend(lines)
    assert ids, "no IDs provided"
    ids    = set(ids)
    logger = Log(appConfigs)
    logger.delete(ids, force=force)


def edit(args):
    """ Edit a log

    If the time of the log been changed, move
    the file of the log to the appropriate
    new parent directory.
    """
    if '--help' in args:
        help('edit')
        exit(0)

    assert len(args) == 1, "wrong arguments"
    id     = args[0]
    assert id, "wrong arguments"
    logger = Log(appConfigs)
    logger.edit(id)


def push(args):
    """ Sync with the git server
    """
    if '--help' in args:
        help('push')
        exit(0)

    logger     = Log(appConfigs)
    remotes    = []
    allRemotes = False
    while args:
        arg = args.pop(0)
        if arg == '-a':
            remotes    = logger.git.allRemotes()
            allRemotes = True
            break
        else:
            remotes.append(arg)
    if not remotes and not allRemotes:
        remotes = ['origin']
    for remote in remotes:
        print('pushing to "%s"' % remote)
        stat = logger.push(remote)
        if not stat:
            break
    exit(0 if stat else 1)


def fetch(args):
    """ Download changes from the git server
    """
    if '--help' in args:
        help('fetch')
        exit(0)

    logger     = Log(appConfigs)
    remotes    = []
    allRemotes = False
    while args:
        arg = args.pop(0)
        if arg == '-a':
            remotes    = logger.git.allRemotes()
            allRemotes = True
            break
        else:
            remotes.append(arg)
    if not remotes and not allRemotes:
        remotes = ['origin']
    for remote in remotes:
        print('fetching from "%s"' % remote)
        stat = logger.fetch(remote)
        if not stat:
            break
    exit(0 if stat else 1)


def clone(args):
    """ Clone the repository from the remote
    """
    if '--help' in args:
        help('clone')
        exit(0)

    assert len(args) == 1, "wrong arguments"
    remote  = args[0]
    dataDir = appConfigs['dataDir']
    stat    = os.system('git shadow-clone %s %s' % (remote, dataDir))
    exit(0 if stat else 1)


def help(cate=None, ofile=sys.stdout):
    bname = os.path.basename(sys.argv[0])
    defaultMsg = "Usage: %s <command> [option [argument]]... [-F config]\n"
    defaultMsg += "       %s <command> --help\n"
    defaultMsg += "available commands: add, del, edit, list, push, fetch, clone"
    defaultMsg = defaultMsg % ((bname,) * 2)

    addMsg = """%s add
%s add -m message
%s add -m message < file
pipe | %s add -m message
%s add -g tag -t time -c scene -p people -m message""" % ((bname,) * 5)

    listMsg = """%s list                             -- list all
%s list -3                          -- show the last three log
%s list -t 2016                     -- in 2016
%s list -t 201601                   -- in Jan. 2016
%s list -t 20160107                 -- on Jan. 7th 2016
%s list -t -7                       -- the 7th day before
%s list -t 3:5                      -- 3th through 5th this month
%s list -t -2:today                 -- from the day before yesterday up to today
%s list -t -2:                      -- from the day before yesterday up to today
%s list -t 0703:0909                -- 3rd Jul. through 9th Sep. this year
%s list -t 20150101:today           -- from Jan. 1st 2015 up to today
%s list -t 20160101,3:5,-2,12       -- any day matches the comma separated list
%s list -Sre                        -- regular expression match for any text fields
%s list -Sre -Sre                   -- match any of the regular expression
%s list -Sre -Sre --all-match       -- match all of the regular expressions
%s list -t 3:5 -Sre                 -- regular expression match for any text fields""" % ((bname,) * 16)

    delMsg = """%s del 297aacc                  -- delete log whose id starts with 297aacc
%s del 297aacc 5e0df2c          -- delete multiple logs
%s del -f 297aacc               -- delete without confirmation
%s del -i list-of-file          -- get log IDs from a file""" % ((bname,) * 4)

    editMsg = "%s edit <log-id>" % bname

    pushMsg = """%s push origin                  -- push to remote 'origin'
%s push origin github           -- push to remote 'origin' and 'github'
%s push -a                      -- push to all remotes""" % ((bname,) * 3)

    fetchMsg = """%s fetch origin                 -- fetch from remote 'origin'
%s fetch origin github          -- fetch from remote 'origin' and 'github'
%s fetch -a                     -- fetch from all remotes""" % ((bname,) * 3)

    cloneMsg = "%s clone <remote-url>" % bname

    if cate == 'add':
        msg = addMsg
    elif cate == 'list':
        msg = listMsg
    elif cate == 'del':
        msg = delMsg
    elif cate == 'edit':
        msg = editMsg
    elif cate == 'push':
        msg = pushMsg
    elif cate == 'fetch':
        msg = fetchMsg
    elif cate == 'clone':
        msg = cloneMsg
    else:
        msg = defaultMsg
    print(msg, file=ofile)


def loadConfig():
    if '-F' in sys.argv:
        idx = sys.argv.index('-F')
        sys.argv.pop(idx)
        assert len(sys.argv) > idx, "need argument for -F option"
        path = sys.argv.pop(idx)
    else:
        path = None

    config = Config(path)
    for k, v in config.data.items():
        appConfigs[k] = v


if __name__ == '__main__':
    # load config from file
    try:
        loadConfig()
    except AssertionError:
        print(sys.exc_info()[1])
        exit(1)
    except:
        print(sys.exc_info()[1])
        help(ofile=sys.stderr)
        exit(1)

    ln = len(sys.argv)
    if ln == 1 or (ln == 2 and '--help' in sys.argv):
        help()
        exit(0)

    # start to work
    try:
        cmd = sys.argv[1]
        if cmd == 'add':
            add(sys.argv[2:])
        elif cmd == 'del':
            delete(sys.argv[2:])
        elif cmd == 'edit':
            edit(sys.argv[2:])
        elif cmd == 'list':
            _list(sys.argv[2:])
        elif cmd == 'push':
            push(sys.argv[2:])
        elif cmd == 'fetch':
            fetch(sys.argv[2:])
        elif cmd == 'clone':
            clone(sys.argv[2:])
        else:
            raise applib.InvalidCmdException('unrecognized command: %s' % cmd)
    except IndexError:
        print('argument error', file=sys.stderr)
        help(ofile=sys.stderr)
        exit(1)
    except BrokenPipeError:
        pass
    except (AssertionError,
            applib.InvalidTimeException,
            applib.InvalidCmdException,
            applib.NotTerminalException) as e:
        print(e, file=sys.stderr)
        exit(1)
