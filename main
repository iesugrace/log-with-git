#!/usr/bin/env python3
# Author: Joshua Chen
# Date: 2016-01-03
# Location: Shenzhen
# Description: a log tool with encrypted remote backup.

import sys, os
import base64

prog_path = os.path.realpath(__file__)
prog_dir  = os.path.dirname(prog_path)
lib_dir   = os.path.join(prog_dir, 'lib')
sys.path.insert(0, lib_dir)

from common import editContent
import interact
import timeutils

data_dir = os.path.join(prog_dir, 'data')


class Record:
    """ Define the fields and methods of a record
    Fields and types:
    subject  --  str
    time     --  int
    scene    --  str
    people   --  str
    tag      --  str
    data     --  str (maybe base64 text for binary data)
    """
    sep = ': '  # separator between key and value

    def __init__(self, subject, time=None, scene='',
                        people='', tag='', data=''):
        time = time if time else timeutils.isodatetime()
        self.subject   =  subject
        self.time      =  timeutils.strtosecond(time)
        self.scene     =  scene
        self.people    =  people
        self.tag       =  tag
        self.data      =  data

    def __repr__(self):
        text = self.__header()
        if self.binary:
            data = "-->> Binary data <<--\n"
        else:
            data = self.data
        text = '%s\n\n%s' % (text, data)
        return text

    def __header(self):
        """ Construct the header of the Log
        Return a str object, no ending new-line.
        """
        text = 'Subject%s%s\nTime%s%s\nScene%s%s\nPeople%s%s\nTag%s%s'
        text = text % (self.sep, self.subject,
                       self.sep, timeutils.isodatetime(self.time),
                       self.sep, self.scene,
                       self.sep, self.people,
                       self.sep, self.tag)
        return text

    def elements(self):
        """ Return a dictionary containing
        all elements of the record
        """
        return self.__dict__


class Git:
    """ Git related operations
    """
    def last(self):
        """ Return the file content of the last commit
        it shall be one file only.
        """
        return None


class LogRecord(Record):
    """ Log Record capable of Git operations
    OS aware operations defined here.
    """
    def __init__(self, subject, time=None, scene='',
                 people='', tag='', data='', binary=False):
        Record.__init__(self, subject, time, scene, people, tag, data)
        self.binary = binary
        self.git    = Git()

    def save(self):
        """ Save instance data to disk,
        and create a git commit
        """
        timestamp  =  self.time
        dateEle    =  timeutils.isodate(timestamp).split('-')
        dirName    =  os.path.join(data_dir, *dateEle)
        fileName   =  self.genName(timestamp)
        filePath   =  os.path.join(dirName, fileName)
        os.makedirs(dirName, exist_ok=True)
        self.engine.save(self, filePath)
        #
        # create a git commit here
        #

    def genName(self, timestamp):
        """ Generate a random file name base on the timestamp
        """
        import random
        s = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
        res = ''
        length = 10
        for i in range(length):
            res += random.choice(s)
        return '%s%s' % (timestamp, res)

    @staticmethod
    def binToAsc(binData):
        """ Convert the binary data into ASCII form,
        using the registered storage engine.
        """
        return LogRecord.engine.b64encode(binData)

    @staticmethod
    def load(path):
        return LogRecord.engine.load(path)


class XmlStorage:
    """ XML storage engine for the record
    """
    @staticmethod
    def b64encode(iData, lineLen=64):
        """ Take the data which is a bytes,
        encode it with base64, split the resulting
        text into lines of 'lineLen', decode each
        line (it was a bytes) to str, concatenate
        them and return them as a whole long line.
        """
        lineLen = lineLen // 4 * 4  # make it times of 4
        oData   = base64.b64encode(iData)
        res     = []
        while oData:
            line, oData = oData[:lineLen], oData[lineLen:]
            res.append(line.decode())
        return '\n'.join(res)

    @staticmethod
    def b64decode(iData):
        """ Take the str, decode it into binary
        """
        iData = iData.replace('\n', '')
        return base64.b64decode(iData)

    @staticmethod
    def sourceToDom(code):
        """ Parse the raw record data which is XML code,
        return a Xml DOM object.
        """
        from xml.dom.minidom import parseString
        return parseString(code)

    @staticmethod
    def load(path):
        """ Load the content of the path,
        parse it, and return a record instance.
        """
        try:
            code = open(path).read()
            doc  = XmlStorage.sourceToDom(code)
        except:
            return None
        fields = {}
        for node in doc.firstChild.childNodes:
            if node.nodeType == node.ELEMENT_NODE:
                name = node.localName
                textNode = node.firstChild
                data = textNode.data if textNode else ''
                fields[name] = data
        fields['binary'] = True if fields['binary'] == 'true' else False
        return LogRecord(**fields)

    @staticmethod
    def createNode(root, nodeName, nodeText):
        """ Add an element node with nodeText to the 'root' element
        """
        from xml.dom.minidom import Element, Text
        ele = Element(nodeName)
        text = Text()
        text.data = nodeText
        ele.appendChild(text)
        root.appendChild(ele)

    @staticmethod
    def recordToSource(record):
        """ Compose Xml source code from a record object
        """
        from xml.dom.minidom import Document, Text
        import re
        doc  = Document()
        root = doc.createElement("log")
        doc.appendChild(root)
        XmlStorage.createNode(root, "subject", record.subject)
        XmlStorage.createNode(root, "time", timeutils.isodatetime(record.time))
        XmlStorage.createNode(root, "scene", record.scene)
        XmlStorage.createNode(root, "people", record.people)
        XmlStorage.createNode(root, "tag", record.tag)
        if record.binary:
            XmlStorage.createNode(root, "binary", "true")
        else:
            XmlStorage.createNode(root, "binary", "false")
        XmlStorage.createNode(root, "data", record.data)
        xmlCode = doc.toprettyxml()
        xmlCode = re.sub('\n(\s*\n)*', '\n', xmlCode)  # remove empty lines
        xmlCode = re.sub('\t', '    ', xmlCode)     # replace tabs with spaces
        return xmlCode

    @staticmethod
    def save(record, path):
        """ Convert the record to Xml code,
        and Write the code to the path.
        """
        code = XmlStorage.recordToSource(record)
        open(path, 'w').write(code)


# Register storage engine
LogRecord.engine = XmlStorage


class Log:
    """ All log operations defined here
    """

    def __init__(self):
        self.git = Git()

    def lastScene(self):
        """ Fetch the recently used scene from the history
        """
        path = self.git.last()
        if path != None:
            record = LogRecord.engine.load(path)
            if record != None:
                return record.scene
        return ''

    def add(self, subject=None, time=None, scene='',
                    people='', tag='', data=b'', interactive=False):
        """ Add a log record to the system
        When interactive is True, ask data for subject, time, scene,
        people, tag, and log data from the use interactively, the
        provided arguments are used as the default value for user's
        choice.
        """
        if data:    # data provided, non-interactively
            if self.isBinary(data):
                binary = True
                data   = LogRecord.binToAsc(data)
            else:
                binary = False
                data = data.decode()
        else:
            binary = False

        if interactive:
            record = self.makeLogEntry(subject=subject, time=time, scene=scene,
                        people=people, tag=tag, data=data, binary=binary)
        else:
            assert (subject != None and subject != ''), "invalid subject"
            record = LogRecord(subject, time, scene, people, tag, data, binary)
        record.save()

    def isBinary(self, data):
        """ Deem to be binary data if failed to decode with utf8
        """
        try:
            data.decode('utf8')
        except UnicodeDecodeError:
            return True
        else:
            return False

    def makeOneRequest(self, name, default, datatype, reader, desc):
        """ Create a request entry, used to interactively collect
        information from the user. A request is a dictionary object
        that contains necessary information to interact with the user.
        """
        suffix = (' [%s]: ' % default) if default else ': '
        prompt = desc + suffix
        if reader:
            actual_reader = (lambda prompt, default: reader(prompt, default))
        else:
            actual_reader = reader
        return dict(name=name, prompt=prompt, datatype=datatype,
                    default=default, reader=actual_reader)

    def makeRequests(self, *, record=None, subject=None, time=None,
                    scene=None, people=None, tag=None):
        """ Create the necessary requests data for collecting
        information for a Record from the user interactively.
        """
        if record:      # a LogRecord instance provided
            subject  =  record.subject
            time     =  record.time
            scene    =  record.scene
            people   =  record.people
            tag      =  record.tag
        else:
            subject = subject if subject else None
            time = time if time else timeutils.isodatetime()
            scene = scene if scene else self.lastScene()
            people = people if people else ''
            tag = tag if tag else ''

        requests = []
        # arguments: name, default, datatype, reader, desc
        requests.append(self.makeOneRequest('subject', subject, str, None, 'subject'))
        requests.append(self.makeOneRequest('time',    time,    str, None, 'time'))
        requests.append(self.makeOneRequest('scene',   scene,   str, None, 'scene'))
        requests.append(self.makeOneRequest('people',  people,  str, None, 'people'))
        requests.append(self.makeOneRequest('tag',     tag,     str, None, 'tag'))
        return requests

    def makeLogEntry(self, *junk, **args):
        """ Make a LogRecord instance interactively
        'data' in the args must be a bytes which can
        be decoded using utf8, binary data that is
        not utf8 encoded, is not applicable.
        """
        data     =  args.pop('data')
        binary   =  args.pop('binary')
        requests = self.makeRequests(**args)
        i        = interact.readMany(requests)
        subject  =  i['subject']
        time     =  i['time']
        scene    =  i['scene']
        people   =  i['people']
        tag      =  i['tag']
        data   = editContent(data).decode()
        record = LogRecord(subject, time, scene, people, tag, data, binary)
        return record


def add(args):
    """ Add a log
    Subject must be provided, all others are optional.
    If data is provided, run in non-interactive mode,
    if stdin is not a tty, run in non-interactive mode,
    otherwise, collect information interactively.
    """
    tag = time = scene = people = subject = data = ''
    interactive = True
    while len(args) >= 2:
        key = args.pop(0)
        if key == '-g':
            tag = args.pop(0)
        elif key == '-t':
            time = args.pop(0)
        elif key == '-c':
            scene = args.pop(0)
        elif key == '-p':
            people = args.pop(0)
        elif key == '-s':
            subject = args.pop(0)
        elif key == '-d':
            data = args.pop(0)
            data = data.rstrip('\n')    # remove all ending new-lines
    assert (subject != None and subject != ''), "invalid subject"
    if data:        # data provided
        interactive = False
        data = data.encode()
    elif not os.isatty(sys.stdin.fileno()):
        interactive = False
        stdin = os.fdopen(sys.stdin.fileno(), 'rb')
        data = stdin.read()
    logger = Log()
    logger.add(subject, time, scene, people, tag, data, interactive)


def help(ofile=sys.stdout):
    bname = os.path.basename(sys.argv[0])
    msg =  "Usage:\n"
    msg += "%s add -s subject\n" % bname
    msg += "cmd | %s add -s subject\n" % bname
    msg += "%s add -s subject -d data\n" % bname
    msg += "%s add -g tag -t time -c scene -p people -s subject -d data" % bname
    print(msg)


if __name__ == '__main__':
    try:
        cmd = sys.argv[1]
    except IndexError:
        help(ofile=sys.stderr)
        exit(1)

    try:
        if cmd == 'add':
            add(sys.argv[2:])
    except AssertionError:
        help(ofile=sys.stderr)
        exit(1)
